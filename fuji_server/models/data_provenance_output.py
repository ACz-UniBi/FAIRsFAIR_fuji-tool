# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DataProvenanceOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, creation_provenance_included: bool=None, modification_provenance_included: bool=None, processes_provenance_included: bool=None, provenance_relations_included: bool=None, structured_provenance_available: bool=None, provenance_metadata_found: List[str]=None):  # noqa: E501
        """DataProvenanceOutput - a model defined in Swagger

        :param creation_provenance_included: The creation_provenance_included of this DataProvenanceOutput.  # noqa: E501
        :type creation_provenance_included: bool
        :param modification_provenance_included: The modification_provenance_included of this DataProvenanceOutput.  # noqa: E501
        :type modification_provenance_included: bool
        :param processes_provenance_included: The processes_provenance_included of this DataProvenanceOutput.  # noqa: E501
        :type processes_provenance_included: bool
        :param provenance_relations_included: The provenance_relations_included of this DataProvenanceOutput.  # noqa: E501
        :type provenance_relations_included: bool
        :param structured_provenance_available: The structured_provenance_available of this DataProvenanceOutput.  # noqa: E501
        :type structured_provenance_available: bool
        :param provenance_metadata_found: The provenance_metadata_found of this DataProvenanceOutput.  # noqa: E501
        :type provenance_metadata_found: List[str]
        """
        self.swagger_types = {
            'creation_provenance_included': bool,
            'modification_provenance_included': bool,
            'processes_provenance_included': bool,
            'provenance_relations_included': bool,
            'structured_provenance_available': bool,
            'provenance_metadata_found': List[str]
        }

        self.attribute_map = {
            'creation_provenance_included': 'creation_provenance_included',
            'modification_provenance_included': 'modification_provenance_included',
            'processes_provenance_included': 'processes_provenance_included',
            'provenance_relations_included': 'provenance_relations_included',
            'structured_provenance_available': 'structured_provenance_available',
            'provenance_metadata_found': 'provenance_metadata_found'
        }
        self._creation_provenance_included = creation_provenance_included
        self._modification_provenance_included = modification_provenance_included
        self._processes_provenance_included = processes_provenance_included
        self._provenance_relations_included = provenance_relations_included
        self._structured_provenance_available = structured_provenance_available
        self._provenance_metadata_found = provenance_metadata_found

    @classmethod
    def from_dict(cls, dikt) -> 'DataProvenanceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataProvenance_output of this DataProvenanceOutput.  # noqa: E501
        :rtype: DataProvenanceOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_provenance_included(self) -> bool:
        """Gets the creation_provenance_included of this DataProvenanceOutput.


        :return: The creation_provenance_included of this DataProvenanceOutput.
        :rtype: bool
        """
        return self._creation_provenance_included

    @creation_provenance_included.setter
    def creation_provenance_included(self, creation_provenance_included: bool):
        """Sets the creation_provenance_included of this DataProvenanceOutput.


        :param creation_provenance_included: The creation_provenance_included of this DataProvenanceOutput.
        :type creation_provenance_included: bool
        """

        self._creation_provenance_included = creation_provenance_included

    @property
    def modification_provenance_included(self) -> bool:
        """Gets the modification_provenance_included of this DataProvenanceOutput.


        :return: The modification_provenance_included of this DataProvenanceOutput.
        :rtype: bool
        """
        return self._modification_provenance_included

    @modification_provenance_included.setter
    def modification_provenance_included(self, modification_provenance_included: bool):
        """Sets the modification_provenance_included of this DataProvenanceOutput.


        :param modification_provenance_included: The modification_provenance_included of this DataProvenanceOutput.
        :type modification_provenance_included: bool
        """

        self._modification_provenance_included = modification_provenance_included

    @property
    def processes_provenance_included(self) -> bool:
        """Gets the processes_provenance_included of this DataProvenanceOutput.


        :return: The processes_provenance_included of this DataProvenanceOutput.
        :rtype: bool
        """
        return self._processes_provenance_included

    @processes_provenance_included.setter
    def processes_provenance_included(self, processes_provenance_included: bool):
        """Sets the processes_provenance_included of this DataProvenanceOutput.


        :param processes_provenance_included: The processes_provenance_included of this DataProvenanceOutput.
        :type processes_provenance_included: bool
        """

        self._processes_provenance_included = processes_provenance_included

    @property
    def provenance_relations_included(self) -> bool:
        """Gets the provenance_relations_included of this DataProvenanceOutput.


        :return: The provenance_relations_included of this DataProvenanceOutput.
        :rtype: bool
        """
        return self._provenance_relations_included

    @provenance_relations_included.setter
    def provenance_relations_included(self, provenance_relations_included: bool):
        """Sets the provenance_relations_included of this DataProvenanceOutput.


        :param provenance_relations_included: The provenance_relations_included of this DataProvenanceOutput.
        :type provenance_relations_included: bool
        """

        self._provenance_relations_included = provenance_relations_included

    @property
    def structured_provenance_available(self) -> bool:
        """Gets the structured_provenance_available of this DataProvenanceOutput.


        :return: The structured_provenance_available of this DataProvenanceOutput.
        :rtype: bool
        """
        return self._structured_provenance_available

    @structured_provenance_available.setter
    def structured_provenance_available(self, structured_provenance_available: bool):
        """Sets the structured_provenance_available of this DataProvenanceOutput.


        :param structured_provenance_available: The structured_provenance_available of this DataProvenanceOutput.
        :type structured_provenance_available: bool
        """

        self._structured_provenance_available = structured_provenance_available

    @property
    def provenance_metadata_found(self) -> List[str]:
        """Gets the provenance_metadata_found of this DataProvenanceOutput.


        :return: The provenance_metadata_found of this DataProvenanceOutput.
        :rtype: List[str]
        """
        return self._provenance_metadata_found

    @provenance_metadata_found.setter
    def provenance_metadata_found(self, provenance_metadata_found: List[str]):
        """Sets the provenance_metadata_found of this DataProvenanceOutput.


        :param provenance_metadata_found: The provenance_metadata_found of this DataProvenanceOutput.
        :type provenance_metadata_found: List[str]
        """

        self._provenance_metadata_found = provenance_metadata_found
