# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fuji_server.models.base_model_ import Model
from fuji_server.models.debug import Debug  # noqa: F401,E501
from fuji_server.models.fair_result_common import FAIRResultCommon  # noqa: F401,E501
from fuji_server.models.fair_result_common_score import FAIRResultCommonScore  # noqa: F401,E501
from fuji_server.models.license_output import LicenseOutput  # noqa: F401,E501
from fuji_server import util


class License(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, metric_identifier: str=None, metric_name: str=None, passed: bool=False, score: FAIRResultCommonScore=None, output: LicenseOutput=None, test_debug: Debug=None):  # noqa: E501
        """License - a model defined in Swagger

        :param id: The id of this License.  # noqa: E501
        :type id: int
        :param metric_identifier: The metric_identifier of this License.  # noqa: E501
        :type metric_identifier: str
        :param metric_name: The metric_name of this License.  # noqa: E501
        :type metric_name: str
        :param passed: The passed of this License.  # noqa: E501
        :type passed: bool
        :param score: The score of this License.  # noqa: E501
        :type score: FAIRResultCommonScore
        :param output: The output of this License.  # noqa: E501
        :type output: LicenseOutput
        :param test_debug: The test_debug of this License.  # noqa: E501
        :type test_debug: Debug
        """
        self.swagger_types = {
            'id': int,
            'metric_identifier': str,
            'metric_name': str,
            'passed': bool,
            'score': FAIRResultCommonScore,
            'output': LicenseOutput,
            'test_debug': Debug
        }

        self.attribute_map = {
            'id': 'id',
            'metric_identifier': 'metric_identifier',
            'metric_name': 'metric_name',
            'passed': 'passed',
            'score': 'score',
            'output': 'output',
            'test_debug': 'test_debug'
        }
        self._id = id
        self._metric_identifier = metric_identifier
        self._metric_name = metric_name
        self._passed = passed
        self._score = score
        self._output = output
        self._test_debug = test_debug

    @classmethod
    def from_dict(cls, dikt) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The License of this License.  # noqa: E501
        :rtype: License
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this License.


        :return: The id of this License.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this License.


        :param id: The id of this License.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metric_identifier(self) -> str:
        """Gets the metric_identifier of this License.


        :return: The metric_identifier of this License.
        :rtype: str
        """
        return self._metric_identifier

    @metric_identifier.setter
    def metric_identifier(self, metric_identifier: str):
        """Sets the metric_identifier of this License.


        :param metric_identifier: The metric_identifier of this License.
        :type metric_identifier: str
        """
        if metric_identifier is None:
            raise ValueError("Invalid value for `metric_identifier`, must not be `None`")  # noqa: E501

        self._metric_identifier = metric_identifier

    @property
    def metric_name(self) -> str:
        """Gets the metric_name of this License.


        :return: The metric_name of this License.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name: str):
        """Sets the metric_name of this License.


        :param metric_name: The metric_name of this License.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")  # noqa: E501

        self._metric_name = metric_name

    @property
    def passed(self) -> bool:
        """Gets the passed of this License.


        :return: The passed of this License.
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed: bool):
        """Sets the passed of this License.


        :param passed: The passed of this License.
        :type passed: bool
        """
        if passed is None:
            raise ValueError("Invalid value for `passed`, must not be `None`")  # noqa: E501

        self._passed = passed

    @property
    def score(self) -> FAIRResultCommonScore:
        """Gets the score of this License.


        :return: The score of this License.
        :rtype: FAIRResultCommonScore
        """
        return self._score

    @score.setter
    def score(self, score: FAIRResultCommonScore):
        """Sets the score of this License.


        :param score: The score of this License.
        :type score: FAIRResultCommonScore
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def output(self) -> LicenseOutput:
        """Gets the output of this License.


        :return: The output of this License.
        :rtype: LicenseOutput
        """
        return self._output

    @output.setter
    def output(self, output: LicenseOutput):
        """Sets the output of this License.


        :param output: The output of this License.
        :type output: LicenseOutput
        """

        self._output = output

    @property
    def test_debug(self) -> Debug:
        """Gets the test_debug of this License.


        :return: The test_debug of this License.
        :rtype: Debug
        """
        return self._test_debug

    @test_debug.setter
    def test_debug(self, test_debug: Debug):
        """Sets the test_debug of this License.


        :param test_debug: The test_debug of this License.
        :type test_debug: Debug
        """

        self._test_debug = test_debug
